//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MintuAssets/Scripts/Inputcontroller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputcontroller : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputcontroller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputcontroller"",
    ""maps"": [
        {
            ""name"": ""InputController"",
            ""id"": ""e0abeaef-25fa-4d87-b5e2-2ed08270ff3a"",
            ""actions"": [
                {
                    ""name"": ""m_pad"",
                    ""type"": ""Value"",
                    ""id"": ""1570f03c-bbe0-4ca2-8ec9-fbafb9c1bbf1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""1dc319f1-0d09-47a1-90d3-2b427ab468f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d54b33da-6f70-4fa7-aa05-49d8eae847b9"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""m_pad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3697f35a-6dd8-45a0-884f-f4f9be36f064"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputController
        m_InputController = asset.FindActionMap("InputController", throwIfNotFound: true);
        m_InputController_m_pad = m_InputController.FindAction("m_pad", throwIfNotFound: true);
        m_InputController_movement = m_InputController.FindAction("movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputController
    private readonly InputActionMap m_InputController;
    private IInputControllerActions m_InputControllerActionsCallbackInterface;
    private readonly InputAction m_InputController_m_pad;
    private readonly InputAction m_InputController_movement;
    public struct InputControllerActions
    {
        private @Inputcontroller m_Wrapper;
        public InputControllerActions(@Inputcontroller wrapper) { m_Wrapper = wrapper; }
        public InputAction @m_pad => m_Wrapper.m_InputController_m_pad;
        public InputAction @movement => m_Wrapper.m_InputController_movement;
        public InputActionMap Get() { return m_Wrapper.m_InputController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputControllerActions set) { return set.Get(); }
        public void SetCallbacks(IInputControllerActions instance)
        {
            if (m_Wrapper.m_InputControllerActionsCallbackInterface != null)
            {
                @m_pad.started -= m_Wrapper.m_InputControllerActionsCallbackInterface.OnM_pad;
                @m_pad.performed -= m_Wrapper.m_InputControllerActionsCallbackInterface.OnM_pad;
                @m_pad.canceled -= m_Wrapper.m_InputControllerActionsCallbackInterface.OnM_pad;
                @movement.started -= m_Wrapper.m_InputControllerActionsCallbackInterface.OnMovement;
                @movement.performed -= m_Wrapper.m_InputControllerActionsCallbackInterface.OnMovement;
                @movement.canceled -= m_Wrapper.m_InputControllerActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_InputControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @m_pad.started += instance.OnM_pad;
                @m_pad.performed += instance.OnM_pad;
                @m_pad.canceled += instance.OnM_pad;
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
            }
        }
    }
    public InputControllerActions @InputController => new InputControllerActions(this);
    public interface IInputControllerActions
    {
        void OnM_pad(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
