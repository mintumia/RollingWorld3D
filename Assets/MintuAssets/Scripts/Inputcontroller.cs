//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MintuAssets/Scripts/Inputcontroller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputcontroller : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputcontroller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputcontroller"",
    ""maps"": [
        {
            ""name"": ""InputController"",
            ""id"": ""e0abeaef-25fa-4d87-b5e2-2ed08270ff3a"",
            ""actions"": [
                {
                    ""name"": ""touchControl"",
                    ""type"": ""Value"",
                    ""id"": ""61ee14d1-0dc7-42fc-b615-36fcdb144031"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c91ca9e-626f-4f7e-b5e0-0a41ac96f51f"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""402d2f52-ac84-4053-a34d-aecaa012912e"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae203b16-542b-4816-b486-e7456850c63c"",
                    ""path"": ""<Touchscreen>/touch0/startPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d78af3-8e00-4246-8aa2-5b9a6f2bbc1f"",
                    ""path"": ""<Touchscreen>/touch1/startPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputController
        m_InputController = asset.FindActionMap("InputController", throwIfNotFound: true);
        m_InputController_touchControl = m_InputController.FindAction("touchControl", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputController
    private readonly InputActionMap m_InputController;
    private IInputControllerActions m_InputControllerActionsCallbackInterface;
    private readonly InputAction m_InputController_touchControl;
    public struct InputControllerActions
    {
        private @Inputcontroller m_Wrapper;
        public InputControllerActions(@Inputcontroller wrapper) { m_Wrapper = wrapper; }
        public InputAction @touchControl => m_Wrapper.m_InputController_touchControl;
        public InputActionMap Get() { return m_Wrapper.m_InputController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputControllerActions set) { return set.Get(); }
        public void SetCallbacks(IInputControllerActions instance)
        {
            if (m_Wrapper.m_InputControllerActionsCallbackInterface != null)
            {
                @touchControl.started -= m_Wrapper.m_InputControllerActionsCallbackInterface.OnTouchControl;
                @touchControl.performed -= m_Wrapper.m_InputControllerActionsCallbackInterface.OnTouchControl;
                @touchControl.canceled -= m_Wrapper.m_InputControllerActionsCallbackInterface.OnTouchControl;
            }
            m_Wrapper.m_InputControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @touchControl.started += instance.OnTouchControl;
                @touchControl.performed += instance.OnTouchControl;
                @touchControl.canceled += instance.OnTouchControl;
            }
        }
    }
    public InputControllerActions @InputController => new InputControllerActions(this);
    public interface IInputControllerActions
    {
        void OnTouchControl(InputAction.CallbackContext context);
    }
}
